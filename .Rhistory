cat("IC al", confianza*100, "% para σ:  [", round(ic_sd_inf, 2),
",", round(ic_sd_sup, 2), "] ")
return(invisible(resultados))
}
# Función personalizada para intervalo de confianza de una proporción
ic_proporcion <- function(x, n, confianza = 0.95) {
p_hat <- x / n
alpha <- 1 - confianza
z_critico <- qnorm(1 - alpha/2)
error_estandar <- sqrt(p_hat * (1 - p_hat) / n)
margen_error <- z_critico * error_estandar
limite_inf <- p_hat - margen_error
limite_sup <- p_hat + margen_error
# Resultados organizados
resultados <- list(
proporcion_muestral = p_hat,
error_estandar = error_estandar,
z_critico = z_critico,
margen_error = margen_error,
limite_inferior = limite_inf,
limite_superior = limite_sup,
intervalo = c(limite_inf, limite_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA UNA PROPORCIÓN ===\n")
cat("Datos:\n")
cat("- Éxitos (x):", x, "\n")
cat("- Tamaño de muestra (n):", n, "\n")
cat("- Proporción muestral (p̂):", round(p_hat, 4), "\n")
cat("- Nivel de confianza:", confianza*100, "%\n\n")
cat("Cálculos:\n")
cat("- Error estándar:", round(error_estandar, 4), "\n")
cat("- Valor z crítico:", round(z_critico, 4), "\n")
cat("- Margen de error:", round(margen_error, 4), "\n\n")
cat("RESULTADO:\n")
cat("IC al", confianza*100, "%: [", round(limite_inf, 4),
",", round(limite_sup, 4), "]\n")
return(invisible(resultados))
}
# Uso de la función con los datos del ejemplo
resultado <- ic_media_sigma(x_barra = 0.85,
sigma = 0.15,
n = 25,
confianza = 0.95)
# Datos del problema
alturas <- c(12.5, 14.2, 13.8, 15.1, 12.9, 14.7, 13.3, 14.9,
13.6, 14.4, 12.8, 15.3, 13.9, 14.1, 13.7)
# Cálculo directo con función incorporada
resultado <- t.test(alturas, conf.level = 0.95)
print(resultado)
# Opción 1: Pasando los datos directamente
resultado1 <- ic_media_s(datos = alturas, confianza = 0.95)
# Opción 2: Pasando los estadísticos calculados
resultado2 <- ic_media_s(x_barra = 13.89, s = 0.85, n = 15, confianza = 0.95)
# Instalar paquete si no está instalado
# install.packages("BSDA")
library(BSDA)
# Instalar paquete si no está instalado
# install.packages("BSDA")
library(BSDA)
# Instalar paquete si no está instalado
install.packages("BSDA")
library(BSDA)
# Datos del ejercicio
n <- 20
media_muestra <- 242
desv_std <- 15
mu_0 <- 250
# Prueba t con estadísticos resumidos usando tsum.test()
tsum.test(mean.x = media_muestra,
s.x = desv_std,
n.x = n,
mu = mu_0,
alternative = "two.sided",
conf.level = 0.95)
# Instalar paquete si no está instalado
install.packages("BSDA")
library(BSDA)
# Prueba t con estadísticos resumidos usando tsum.test()
tsum.test(mean.x = 242,
s.x = 15,
n.x = 20,
mu = 250,
alternative = "two.sided",
conf.level = 0.95)
install.packages("BSDA")
# Instalar paquete si no está instalado
## Para manipulación y visualización de datos
if (!require(BSDA)) install.packages("BSDA")
# Prueba t con estadísticos resumidos usando tsum.test()
tsum.test(mean.x = 242,
s.x = 15,
n.x = 20,
mu = 250,
alternative = "two.sided",
conf.level = 0.95)
trat1 <- c(10,12,11,13,12,11,14,13)
trat2 <- c(9,10,11,10,12,10,11,10)
var.test(trat1, trat2,
alternative = "two.sided",
conf.level = 0.95)
# Instalar paquete si no está instalado
## Para realizar pruebas de hipotesis
if (!require(BSDA)) install.packages("BSDA")
# Prueba t con estadísticos resumidos usando tsum.test()
tsum.test(mean.x = 242,
s.x = 15,
n.x = 20,
mu = 250,
alternative = "two.sided",
conf.level = 0.95)
# Datos del ejercicio
mean1 <- 25.97; s1 <- 1.36; n1 <- 13  # Especie 1
mean2 <- 25.39; s2 <- 1.77; n2 <- 14  # Especie 2
# Prueba t para dos muestras independientes con varianzas iguales
tsum.test(mean.x = mean1, s.x = s1, n.x = n1,
mean.y = mean2, s.y = s2, n.y = n2,
alternative = "two.sided",
mu = 0,                    # diferencia hipotética (H₀: μ₁ - μ₂ = 0)
var.equal = TRUE,          # asume varianzas iguales (pooled)
conf.level = 0.95)         # nivel de confianza
# Datos del ejercicio (estadísticos de las diferencias)
n <- 10
mean_diff <- -0.4    # media de diferencias (antes - después)
sd_diff <- 0.8       # desviación estándar de diferencias
# Prueba t pareada usando estadísticos resumidos
# Para muestras pareadas, usamos tsum.test() con una sola muestra
# (las diferencias)
tsum.test(mean.x = mean_diff,
s.x = sd_diff,
n.x = n,
mu = 0,                    # H₀: μ_D = 0
alternative = "two.sided",
conf.level = 0.95)
# Datos
antes <- c(9.0,7.3,6.7,5.3,8.7,6.3,7.9,7.3,8.0,8.5)
despues <- c(9.2,8.2,8.5,4.9,8.9,5.8,8.2,7.8,9.5,8.0)
# Test para datos pareados
t.test(antes, despues,
paired = TRUE,
alternative = "two.sided",
conf.level = 0.95)
prop.test(x = 120, n = 180,
p = 0.60,                # valor bajo H0
alternative = "two.sided",
correct = FALSE)         # sin corrección de continuidad
xp <- c(110, 210)   # éxitos en cada grupo
np <- c(200, 300)   # tamaño de cada grupo
prop.test(xp, np,
alternative = "two.sided",
correct = FALSE)
library(BSDA)
# Vector de datos simulados
datos <- c(8.1, 7.9, 8.5, 7.8, 8.3, 8.0, 8.2, 8.4, 7.7, 8.6)
# Prueba de hipótesis para una varianza
sigma.test(x = datos, sigma = 2, alternative = "greater")
install.packages("BSDA")
library(BSDA)
# Vector de datos simulados
datos <- c(8.1, 7.9, 8.5, 7.8, 8.3, 8.0, 8.2, 8.4, 7.7, 8.6)
# Prueba de hipótesis para una varianza
sigma.test(x = datos, sigma = 2, alternative = "greater")
install.packages("BSDA")
library(BSDA)
# Vector de datos simulados
datos <- c(8.1, 7.9, 8.5, 7.8, 8.3, 8.0, 8.2, 8.4, 7.7, 8.6)
# Prueba de hipótesis para una varianza
sigma.test(x = datos, sigma = 2, alternative = "greater")
library(BSDA)
# Vector de datos simulados
datos <- c(8.1, 7.9, 8.5, 7.8, 8.3, 8.0, 8.2, 8.4, 7.7, 8.6)
# Prueba de hipótesis para una varianza
sigma.test(x = datos, sigma = 2, alternative = "greater")
?BSDA::sigma.test
ls("package:BSDA")
# Vector de datos simulados
datos <- c(8.1, 7.9, 8.5, 7.8, 8.3, 8.0, 8.2, 8.4, 7.7, 8.6)
# Prueba de hipótesis para una varianza
sigma.test(x = datos, sigma = 2, alternative = "greater")
# Instalar paquete si no está instalado
## Para realizar pruebas de hipotesis
if (!require(BSDA)) install.packages("BSDA")
if (!require(EnvStats)) install.packages("EnvStats")
# Prueba t con estadísticos resumidos usando tsum.test()
tsum.test(mean.x = 242,
s.x = 15,
n.x = 20,
mu = 250,
alternative = "two.sided",
conf.level = 0.95)
# Vector de datos simulados
datos <- c(8.1, 7.9, 8.5, 7.8, 8.3, 8.0, 8.2, 8.4, 7.7, 8.6)
library(EnvStats)
varTest(datos, sigma.squared = 4, alternative = "greater")
# Datos de ejemplo
datos <- c(8.1, 7.9, 8.5, 7.8, 8.3, 8.0, 8.2, 8.4, 7.7, 8.6)
# Prueba de hipótesis para una varianza
# H0: varianza = 4; Ha: varianza > 4
varTest(x = datos,
sigma.squared = 4,         # valor hipotético de la varianza bajo H0
alternative = "greater",   # prueba unilateral a la derecha
conf.level = 0.95)         # nivel de confianza
n <- 10
s2 <- 5.8
sigma0_2 <- 4
chi_sq <- (n - 1) * s2 / sigma0_2
p_value <- pchisq(chi_sq, df = n - 1, lower.tail = FALSE)
chi_sq    # valor del estadístico
p_value   # valor-p asociado
# Función personalizada para prueba de hipótesis de una varianza
var_test_custom <- function(x = NULL, n = NULL, s2 = NULL, sigma0_2,
alternative = "two.sided", alpha = 0.05) {
# Validación de argumentos
if (is.null(x) && (is.null(n) || is.null(s2))) {
stop("Debe proporcionar 'x' (vector de datos) o 'n' y 's2' (estadísticos muestrales)")
}
if (!is.null(x) && (!is.null(n) || !is.null(s2))) {
warning("Se proporcionaron datos y estadísticos. Se usarán los datos 'x'")
}
# Calcular estadísticos si se proporcionan los datos
if (!is.null(x)) {
n <- length(x)
s2 <- var(x)
}
# Validar alternative
alternative <- match.arg(alternative, c("two.sided", "less", "greater"))
# Calcular estadístico chi-cuadrado
chi_sq <- (n - 1) * s2 / sigma0_2
df <- n - 1
# Calcular valor-p según el tipo de prueba
if (alternative == "two.sided") {
# Para prueba bilateral, usar el mínimo de las dos colas multiplicado por 2
p_value <- 2 * min(pchisq(chi_sq, df), pchisq(chi_sq, df, lower.tail = FALSE))
} else if (alternative == "greater") {
p_value <- pchisq(chi_sq, df, lower.tail = FALSE)
} else { # alternative == "less"
p_value <- pchisq(chi_sq, df, lower.tail = TRUE)
}
# Decisión
decision <- ifelse(p_value < alpha, "Rechazar H0", "No rechazar H0")
# Valor crítico
if (alternative == "two.sided") {
crit_lower <- qchisq(alpha/2, df)
crit_upper <- qchisq(1 - alpha/2, df)
critical_value <- c(crit_lower, crit_upper)
} else if (alternative == "greater") {
critical_value <- qchisq(1 - alpha, df)
} else { # alternative == "less"
critical_value <- qchisq(alpha, df)
}
# Crear objeto de resultado
result <- list(
statistic = chi_sq,
parameter = df,
p.value = p_value,
critical.value = critical_value,
alternative = alternative,
method = "Prueba de hipótesis para una varianza (Chi-cuadrado)",
data.name = deparse(substitute(x)),
sample.size = n,
sample.variance = s2,
null.variance = sigma0_2,
alpha = alpha,
decision = decision
)
class(result) <- "var_test_custom"
return(result)
}
# Método print personalizado para mostrar resultados de forma clara
print.var_test_custom <- function(x, ...) {
cat("\n")
cat(x$method, "\n")
cat("Datos:", x$data.name, "\n")
cat("\n")
cat("Hipótesis:\n")
if (x$alternative == "two.sided") {
cat("H0: sigma^2 =", x$null.variance, "\n")
cat("Ha: sigma^2 ≠", x$null.variance, "\n")
} else if (x$alternative == "greater") {
cat("H0: sigma^2 ≤", x$null.variance, "\n")
cat("Ha: sigma^2 >", x$null.variance, "\n")
} else {
cat("H0: sigma^2 ≥", x$null.variance, "\n")
cat("Ha: sigma^2 <", x$null.variance, "\n")
}
cat("\n")
cat("Estadísticos de la muestra:\n")
cat("n =", x$sample.size, "\n")
cat("s^2 =", round(x$sample.variance, 4), "\n")
cat("\n")
cat("Estadístico de prueba:\n")
cat("Chi-cuadrado =", round(x$statistic, 4), "\n")
cat("Grados de libertad =", x$parameter, "\n")
cat("\n")
cat("Valor crítico(s):\n")
if (length(x$critical.value) == 2) {
cat("Chi^2(", x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[1], 4), "\n")
cat("Chi^2(", 1-x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[2], 4), "\n")
} else {
cat("Chi^2 crítico =", round(x$critical.value, 4), "\n")
}
cat("\n")
cat("Valor-p =", round(x$p.value, 6), "\n")
cat("Nivel de significancia =", x$alpha, "\n")
cat("\n")
cat("Decisión:", x$decision, "\n")
cat("\n")
}
# Función personalizada para prueba de hipótesis de una varianza
var_test_chi <- function(x = NULL, n = NULL, s2 = NULL, sigma0_2,
alternative = "two.sided", alpha = 0.05) {
# Validación de argumentos
if (is.null(x) && (is.null(n) || is.null(s2))) {
stop("Debe proporcionar 'x' (vector de datos) o 'n' y 's2' (estadísticos muestrales)")
}
if (!is.null(x) && (!is.null(n) || !is.null(s2))) {
warning("Se proporcionaron datos y estadísticos. Se usarán los datos 'x'")
}
# Calcular estadísticos si se proporcionan los datos
if (!is.null(x)) {
n <- length(x)
s2 <- var(x)
}
# Validar alternative
alternative <- match.arg(alternative, c("two.sided", "less", "greater"))
# Calcular estadístico chi-cuadrado
chi_sq <- (n - 1) * s2 / sigma0_2
df <- n - 1
# Calcular valor-p según el tipo de prueba
if (alternative == "two.sided") {
# Para prueba bilateral, usar el mínimo de las dos colas multiplicado por 2
p_value <- 2 * min(pchisq(chi_sq, df), pchisq(chi_sq, df, lower.tail = FALSE))
} else if (alternative == "greater") {
p_value <- pchisq(chi_sq, df, lower.tail = FALSE)
} else { # alternative == "less"
p_value <- pchisq(chi_sq, df, lower.tail = TRUE)
}
# Decisión
decision <- ifelse(p_value < alpha, "Rechazar H0", "No rechazar H0")
# Valor crítico
if (alternative == "two.sided") {
crit_lower <- qchisq(alpha/2, df)
crit_upper <- qchisq(1 - alpha/2, df)
critical_value <- c(crit_lower, crit_upper)
} else if (alternative == "greater") {
critical_value <- qchisq(1 - alpha, df)
} else { # alternative == "less"
critical_value <- qchisq(alpha, df)
}
# Crear objeto de resultado
result <- list(
statistic = chi_sq,
parameter = df,
p.value = p_value,
critical.value = critical_value,
alternative = alternative,
method = "Prueba de hipótesis para una varianza (Chi-cuadrado)",
data.name = deparse(substitute(x)),
sample.size = n,
sample.variance = s2,
null.variance = sigma0_2,
alpha = alpha,
decision = decision
)
class(result) <- "var_test_custom"
return(result)
}
# Método print personalizado para mostrar resultados de forma clara
print.var_test_custom <- function(x, ...) {
cat("\n")
cat(x$method, "\n")
cat("Datos:", x$data.name, "\n")
cat("\n")
cat("Hipótesis:\n")
if (x$alternative == "two.sided") {
cat("H0: sigma^2 =", x$null.variance, "\n")
cat("Ha: sigma^2 ≠", x$null.variance, "\n")
} else if (x$alternative == "greater") {
cat("H0: sigma^2 ≤", x$null.variance, "\n")
cat("Ha: sigma^2 >", x$null.variance, "\n")
} else {
cat("H0: sigma^2 ≥", x$null.variance, "\n")
cat("Ha: sigma^2 <", x$null.variance, "\n")
}
cat("\n")
cat("Estadísticos de la muestra:\n")
cat("n =", x$sample.size, "\n")
cat("s^2 =", round(x$sample.variance, 4), "\n")
cat("\n")
cat("Estadístico de prueba:\n")
cat("Chi-cuadrado =", round(x$statistic, 4), "\n")
cat("Grados de libertad =", x$parameter, "\n")
cat("\n")
cat("Valor crítico(s):\n")
if (length(x$critical.value) == 2) {
cat("Chi^2(", x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[1], 4), "\n")
cat("Chi^2(", 1-x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[2], 4), "\n")
} else {
cat("Chi^2 crítico =", round(x$critical.value, 4), "\n")
}
cat("\n")
cat("Valor-p =", round(x$p.value, 6), "\n")
cat("Nivel de significancia =", x$alpha, "\n")
cat("\n")
cat("Decisión:", x$decision, "\n")
cat("\n")
}
# Función personalizada para prueba de hipótesis de una varianza
var_test_chi <- function(x = NULL, n = NULL, s2 = NULL, sigma0_2,
alternative = "two.sided", alpha = 0.05) {
# Validación de argumentos
if (is.null(x) && (is.null(n) || is.null(s2))) {
stop("Debe proporcionar 'x' (vector de datos) o 'n' y 's2' (estadísticos muestrales)")
}
if (!is.null(x) && (!is.null(n) || !is.null(s2))) {
warning("Se proporcionaron datos y estadísticos. Se usarán los datos 'x'")
}
# Calcular estadísticos si se proporcionan los datos
if (!is.null(x)) {
n <- length(x)
s2 <- var(x)
}
# Validar alternative
alternative <- match.arg(alternative, c("two.sided", "less", "greater"))
# Calcular estadístico chi-cuadrado
chi_sq <- (n - 1) * s2 / sigma0_2
df <- n - 1
# Calcular valor-p según el tipo de prueba
if (alternative == "two.sided") {
# Para prueba bilateral, usar el mínimo de las dos colas multiplicado por 2
p_value <- 2 * min(pchisq(chi_sq, df), pchisq(chi_sq, df, lower.tail = FALSE))
} else if (alternative == "greater") {
p_value <- pchisq(chi_sq, df, lower.tail = FALSE)
} else { # alternative == "less"
p_value <- pchisq(chi_sq, df, lower.tail = TRUE)
}
# Decisión
decision <- ifelse(p_value < alpha, "Rechazar H0", "No rechazar H0")
# Valor crítico
if (alternative == "two.sided") {
crit_lower <- qchisq(alpha/2, df)
crit_upper <- qchisq(1 - alpha/2, df)
critical_value <- c(crit_lower, crit_upper)
} else if (alternative == "greater") {
critical_value <- qchisq(1 - alpha, df)
} else { # alternative == "less"
critical_value <- qchisq(alpha, df)
}
# Crear objeto de resultado
result <- list(
statistic = chi_sq,
parameter = df,
p.value = p_value,
critical.value = critical_value,
alternative = alternative,
method = "Prueba de hipótesis para una varianza (Chi-cuadrado)",
data.name = deparse(substitute(x)),
sample.size = n,
sample.variance = s2,
null.variance = sigma0_2,
alpha = alpha,
decision = decision
)
class(result) <- "var_test_custom"
return(result)
}
# Método print personalizado para mostrar resultados de forma clara
print.var_test_custom <- function(x, ...) {
cat("\n")
cat(x$method, "\n")
cat("Datos:", x$data.name, "\n")
cat("\n")
cat("Hipótesis:\n")
if (x$alternative == "two.sided") {
cat("H0: sigma^2 =", x$null.variance, "\n")
cat("Ha: sigma^2 ≠", x$null.variance, "\n")
} else if (x$alternative == "greater") {
cat("H0: sigma^2 ≤", x$null.variance, "\n")
cat("Ha: sigma^2 >", x$null.variance, "\n")
} else {
cat("H0: sigma^2 ≥", x$null.variance, "\n")
cat("Ha: sigma^2 <", x$null.variance, "\n")
}
cat("\n")
cat("Estadísticos de la muestra:\n")
cat("n =", x$sample.size, "\n")
cat("s^2 =", round(x$sample.variance, 4), "\n")
cat("\n")
cat("Estadístico de prueba:\n")
cat("Chi-cuadrado =", round(x$statistic, 4), "\n")
cat("Grados de libertad =", x$parameter, "\n")
cat("\n")
cat("Valor crítico(s):\n")
if (length(x$critical.value) == 2) {
cat("Chi^2(", x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[1], 4), "\n")
cat("Chi^2(", 1-x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[2], 4), "\n")
} else {
cat("Chi^2 crítico =", round(x$critical.value, 4), "\n")
}
cat("\n")
cat("Valor-p =", round(x$p.value, 6), "\n")
cat("Nivel de significancia =", x$alpha, "\n")
cat("\n")
cat("Decisión:", x$decision, "\n")
cat("\n")
}
# Aplicacion de la funcion personalizada
var_test_custom(n = 10, s2 = 5.8,
sigma0_2 = 4,
alternative = "greater",
alpha = 0.05)
