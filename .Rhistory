clase_modal <- which.max(tabla$Frecuencia_Absoluta)
d1 <- tabla$Frecuencia_Absoluta[clase_modal] -
ifelse(clase_modal == 1, 0,
tabla$Frecuencia_Absoluta[clase_modal - 1])
d2 <- tabla$Frecuencia_Absoluta[clase_modal] -
ifelse(clase_modal == parametros$k, 0,
tabla$Frecuencia_Absoluta[clase_modal + 1])
moda <- tabla$Limite_Inferior[clase_modal] +
(d1 / (d1 + d2)) * parametros$amplitud
return(list(media = media, mediana = mediana, moda = moda))
}
# Calcular medidas
tendencia <- calcular_tendencia_central(tabla_freq, parametros)
# Mostrar resultados
tendencia
n <- length(datos)
# Parámetros del ejemplo del PDF
k <- 8  # Número de clases del ejemplo
amplitud <- 0.75  # Amplitud fija del ejemplo
return(list(
n = n,
x_min = x_min,
x_max = x_max,
rango = rango,
k = k,
amplitud = amplitud
))
# Función para calcular parámetros de agrupamiento (siguiendo el ejemplo del PDF)
calcular_parametros_agrupamiento <- function(datos) {
n <- length(datos)
x_min <- min(datos)
x_max <- max(datos)
rango <- x_max - x_min
# Parámetros del ejemplo del PDF
k <- 8  # Número de clases del ejemplo
amplitud <- 0.75  # Amplitud fija del ejemplo
return(list(
n = n,
x_min = x_min,
x_max = x_max,
rango = rango,
k = k,
amplitud = amplitud
))
}
# Aplicar función
parametros <- calcular_parametros_agrupamiento(longitud_petalo)
parametros
# Función corregida para construir tabla de frecuencias
construir_tabla_frecuencias <- function(datos, parametros) {
# Crear límites exactos del ejemplo del PDF
limite_inferior <- c(1.00, 1.75, 2.50, 3.25, 4.00, 4.75, 5.50, 6.25)
limite_superior <- c(1.75, 2.50, 3.25, 4.00, 4.75, 5.50, 6.25, 7.00)
# Calcular marcas de clase
marca_clase <- (limite_inferior + limite_superior) / 2
# Calcular frecuencias absolutas manualmente para cada intervalo
frecuencia_absoluta <- numeric(parametros$k)
for(i in 1:parametros$k) {
if(i < parametros$k) {
# Para todas las clases excepto la última: [Li, Ls)
frecuencia_absoluta[i] <- sum(datos >= limite_inferior[i] &
datos < limite_superior[i])
} else {
# Para la última clase: [Li, Ls]
frecuencia_absoluta[i] <- sum(datos >= limite_inferior[i] &
datos <= limite_superior[i])
}
}
# Calcular frecuencias derivadas
frecuencia_relativa <- frecuencia_absoluta / parametros$n
frecuencia_acumulada <- cumsum(frecuencia_absoluta)
fi_xi <- frecuencia_absoluta * marca_clase
fi_xi2 <- frecuencia_absoluta * (marca_clase^2)
# Crear tabla
tabla <- data.frame(
Clase = 1:parametros$k,
Limite_Inferior = limite_inferior,
Limite_Superior = limite_superior,
Marca_Clase = round(marca_clase, 3),
Frecuencia_Absoluta = frecuencia_absoluta,
Frecuencia_Relativa = round(frecuencia_relativa, 4),
Frecuencia_Acumulada = frecuencia_acumulada,
fi_xi = round(fi_xi, 3),
fi_xi2 = round(fi_xi2, 3)
)
return(tabla)
}
# Construir tabla de frecuencias
tabla_freq <- construir_tabla_frecuencias(longitud_petalo, parametros)
# Mostrar tabla
tabla_freq
# Función para calcular parámetros de agrupamiento (siguiendo el ejemplo del PDF)
calcular_parametros_agrupamiento <- function(datos) {
n <- length(datos)
x_min <- min(datos)
x_max <- max(datos)
rango <- x_max - x_min
# Parámetros del ejemplo del PDF
k <- 8  # Número de clases del ejemplo
amplitud <- 0.75  # Amplitud fija del ejemplo
return(list(
n = n,
x_min = x_min,
x_max = x_max,
rango = rango,
k = k,
amplitud = amplitud
))
}
# Aplicar función
parametros <- calcular_parametros_agrupamiento(longitud_petalo)
parametros
# Función corregida para construir tabla de frecuencias
construir_tabla_frecuencias <- function(datos, parametros) {
# Crear límites exactos del ejemplo del PDF
limite_inferior <- c(1.00, 1.75, 2.50, 3.25, 4.00, 4.75, 5.50, 6.25)
limite_superior <- c(1.75, 2.50, 3.25, 4.00, 4.75, 5.50, 6.25, 7.00)
# Calcular marcas de clase
marca_clase <- (limite_inferior + limite_superior) / 2
# Calcular frecuencias absolutas manualmente para cada intervalo
frecuencia_absoluta <- numeric(parametros$k)
for(i in 1:parametros$k) {
if(i < parametros$k) {
# Para todas las clases excepto la última: [Li, Ls)
frecuencia_absoluta[i] <- sum(datos >= limite_inferior[i] &
datos < limite_superior[i])
} else {
# Para la última clase: [Li, Ls]
frecuencia_absoluta[i] <- sum(datos >= limite_inferior[i] &
datos <= limite_superior[i])
}
}
# Calcular frecuencias derivadas
frecuencia_relativa <- frecuencia_absoluta / parametros$n
frecuencia_acumulada <- cumsum(frecuencia_absoluta)
fi_xi <- frecuencia_absoluta * marca_clase
fi_xi2 <- frecuencia_absoluta * (marca_clase^2)
# Crear tabla
tabla <- data.frame(
Clase = 1:parametros$k,
Limite_Inferior = limite_inferior,
Limite_Superior = limite_superior,
Marca_Clase = round(marca_clase, 3),
Frecuencia_Absoluta = frecuencia_absoluta,
Frecuencia_Relativa = round(frecuencia_relativa, 4),
Frecuencia_Acumulada = frecuencia_acumulada,
fi_xi = round(fi_xi, 3),
fi_xi2 = round(fi_xi2, 3)
)
return(tabla)
}
# Construir tabla de frecuencias
tabla_freq <- construir_tabla_frecuencias(longitud_petalo, parametros)
# Mostrar tabla
tabla_freq
# Las funciones de cálculo de estadísticos permanecen igual
calcular_tendencia_central <- function(tabla, parametros) {
# Media aritmética
media <- sum(tabla$fi_xi) / parametros$n
# Mediana
posicion_mediana <- parametros$n / 2
clase_mediana <- which(tabla$Frecuencia_Acumulada >= posicion_mediana)[1]
fa_anterior <- ifelse(clase_mediana == 1, 0,
tabla$Frecuencia_Acumulada[clase_mediana - 1])
mediana <- tabla$Limite_Inferior[clase_mediana] +
((posicion_mediana - fa_anterior) /
tabla$Frecuencia_Absoluta[clase_mediana]) * parametros$amplitud
# Moda
clase_modal <- which.max(tabla$Frecuencia_Absoluta)
d1 <- tabla$Frecuencia_Absoluta[clase_modal] -
ifelse(clase_modal == 1, 0,
tabla$Frecuencia_Absoluta[clase_modal - 1])
d2 <- tabla$Frecuencia_Absoluta[clase_modal] -
ifelse(clase_modal == parametros$k, 0,
tabla$Frecuencia_Absoluta[clase_modal + 1])
moda <- tabla$Limite_Inferior[clase_modal] +
(d1 / (d1 + d2)) * parametros$amplitud
return(list(media = media, mediana = mediana, moda = moda))
}
# Calcular medidas
tendencia <- calcular_tendencia_central(tabla_freq, parametros)
cat("Medidas de Tendencia Central:\n")
cat("Media aritmética:", round(tendencia$media, 2), "cm\n")
cat("Mediana:", round(tendencia$mediana, 2), "cm\n")
cat("Moda:", round(tendencia$moda, 3), "cm\n")
# Función para calcular parámetros de agrupamiento
calcular_parametros_agrupamiento <- function(datos) {
n <- length(datos)
x_min <- min(datos)
x_max <- max(datos)
rango <- x_max - x_min
# Regla de Sturges para número de clases
k <- round(1 + 3.322 * log10(n))
# Amplitud de clase
amplitud <- rango / k
return(list(
n = n,
x_min = x_min,
x_max = x_max,
rango = rango,
k = k,
amplitud = amplitud
))
}
# Aplicar función
parametros <- calcular_parametros_agrupamiento(longitud_petalo)
parametros
# Función para construir tabla de frecuencias
construir_tabla_frecuencias <- function(datos, parametros) {
# Crear límites de clase
limite_inferior <- seq(parametros$x_min,
parametros$x_max - parametros$amplitud,
by = parametros$amplitud)
limite_superior <- seq(parametros$x_min + parametros$amplitud,
parametros$x_max,
by = parametros$amplitud)
# Ajustar último límite superior
limite_superior[length(limite_superior)] <- parametros$x_max
# Calcular marcas de clase
marca_clase <- (limite_inferior + limite_superior) / 2
# Calcular frecuencias absolutas usando cut()
intervalos <- cut(datos,
breaks = c(limite_inferior, parametros$x_max),
include.lowest = TRUE,
right = FALSE)
frecuencia_absoluta <- as.numeric(table(intervalos))
# Calcular frecuencias derivadas
frecuencia_relativa <- frecuencia_absoluta / parametros$n
frecuencia_acumulada <- cumsum(frecuencia_absoluta)
fi_xi <- frecuencia_absoluta * marca_clase
fi_xi2 <- frecuencia_absoluta * (marca_clase^2)
# Crear tabla
tabla <- data.frame(
Clase = 1:parametros$k,
Limite_Inferior = limite_inferior,
Limite_Superior = limite_superior,
Marca_Clase = round(marca_clase, 3),
Frecuencia_Absoluta = frecuencia_absoluta,
Frecuencia_Relativa = round(frecuencia_relativa, 4),
Frecuencia_Acumulada = frecuencia_acumulada,
fi_xi = round(fi_xi, 3),
fi_xi2 = round(fi_xi2, 3)
)
return(tabla)
}
# Construir tabla de frecuencias
tabla_freq <- construir_tabla_frecuencias(longitud_petalo, parametros)
# Mostrar tabla
tabla_freq
# Función para calcular parámetros de agrupamiento
calcular_parametros_agrupamiento <- function(datos) {
n <- length(datos)
x_min <- min(datos)
x_max <- max(datos)
rango <- x_max - x_min
# Regla de Sturges para número de clases
k <- round(1 + 3.322 * log10(n))
# Amplitud de clase
amplitud <- rango / k
return(list(
n = n,
x_min = x_min,
x_max = x_max,
rango = rango,
k = k,
amplitud = amplitud
))
}
# Aplicar función
parametros <- calcular_parametros_agrupamiento(longitud_petalo)
# Visualizar el resultado
parametros
# Construir tabla de frecuencias
tabla_freq <- construir_tabla_frecuencias(longitud_petalo, parametros)
# Mostrar tabla
tabla_freq
# Instalación y carga de paquetes necesarios
## Para manipulación y visualización de datos
if (!require(tidyverse)) install.packages("tidyverse")
## Para estadísticas descriptivas
if (!require(psych)) install.packages("psych")
# Instalación y carga de paquetes necesarios
## Para manipulación y visualización de datos
if (!require(tidyverse)) install.packages("tidyverse")
## Para estadísticas exportar archivos en excel
if (!require(writexl)) install.packages("writexl")
# Exportar la tabla de frecuencias
write_xlsx(tabla_freq, "tabla_frecuencias.xlsx")
# Calcular medidas
tendencia <- calcular_tendencia_central(tabla_freq, parametros)
# Mostrar resultados
tendencia
# Calcular medidas de dispersión
dispersion <- calcular_dispersion(tabla_freq, parametros, tendencia$media)
# Mostrar los resultados
dispersion
# Calcular Q1 y P80
Q1 <- calcular_posicion_relativa(tabla_freq, parametros, 1, "cuartil");Q1
P80 <- calcular_posicion_relativa(tabla_freq, parametros, 80, "percentil");P80
# Instalación y carga de paquetes necesarios
## Para manipulación y visualización de datos
if (!require(tidyverse)) install.packages("tidyverse")
## Para estadísticas exportar archivos en excel
if (!require(writexl)) install.packages("writexl")
# Cargar el dataset iris
data(iris)
# Extraer la variable longitud de pétalo
longitud_petalo <- iris$Petal.Length
hist(longitud_petalo,
breaks = seq(min(iris$Petal.Length), max(iris$Petal.Length), length.out = parametros$k + 1),
main = "Histograma de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia",
col = "skyblue",
border = "black")
# Calcular las marcas de clase y las frecuencias absolutas
marcas_clase <- tabla_freq$Marca_Clase
frecuencias <- tabla_freq$Frecuencia_Absoluta
# Crear el polígono de frecuencias
plot(marcas_clase, frecuencias,
type = "l",  # "l" para líneas
main = "Polígono de Frecuencias de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia",
col = "blue",
lwd = 2)  # Grosor de la línea
# Agregar puntos en las marcas de clase
points(marcas_clase, frecuencias, col = "red", pch = 16)  # pch = 16 para círculos rellenos
# Calcular las marcas de clase y las frecuencias absolutas
marcas_clase <- tabla_freq$Marca_Clase
frecuencias <- tabla_freq$Frecuencia_Absoluta
# Crear el polígono de frecuencias
plot(tabla_freq$Marca_Clase, tabla_freq$Frecuencia_Absoluta,
type = "l",  # "l" para líneas
main = "Polígono de Frecuencias de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia",
col = "blue",
lwd = 2)  # Grosor de la línea
# Agregar puntos en las marcas de clase
points(marcas_clase, frecuencias, col = "red", pch = 16)  # pch = 16 para círculos rellenos
# Ojiva "Menor Que"
plot(tabla_freq$Limite_Superior, tabla_freq$Frecuencia_Acumulada,
type = "l",
main = "Ojiva 'Menor Que' de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia Acumulada",
col = "blue")
# Ojiva "Mayor Que"
frecuencia_acumulada_mayor_que <- rev(cumsum(rev(tabla_freq$Frecuencia_Absoluta)))
plot(tabla_freq$Limite_Inferior, frecuencia_acumulada_mayor_que,
type = "l",
main = "Ojiva 'Mayor Que' de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia Acumulada",
col = "red")
# Ojiva "Menor Que"
plot(tabla_freq$Limite_Superior, tabla_freq$Frecuencia_Acumulada,
type = "l",
main = "Ojiva 'Menor Que' de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia Acumulada",
col = "blue")
# Ojiva "Mayor Que"
frecuencia_acumulada_mayor_que <- rev(cumsum(rev(tabla_freq$Frecuencia_Absoluta)))
plot(tabla_freq$Limite_Inferior, frecuencia_acumulada_mayor_que,
type = "l",
main = "Ojiva 'Mayor Que' de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia Acumulada",
col = "red")
# Agregar puntos en los límites superiores
points(tabla_freq$Limite_Inferior, tabla_freq$Frecuencia_Absoluta, col = "red", pch = 16)  # pch = 16 para círculos rellenos
# Ojiva "Menor Que"
plot(tabla_freq$Limite_Superior, tabla_freq$Frecuencia_Acumulada,
type = "l",
main = "Ojiva 'Menor Que' de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia Acumulada",
col = "blue")
# Ojiva "Mayor Que"
frecuencia_acumulada_mayor_que <- rev(cumsum(rev(tabla_freq$Frecuencia_Absoluta)))
plot(tabla_freq$Limite_Inferior, frecuencia_acumulada_mayor_que,
type = "l",
main = "Ojiva 'Mayor Que' de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia Acumulada",
col = "red")
# Agregar puntos en los límites superiores
points(tabla_freq$Limite_Inferior, tabla_freq$Frecuencia_Acumulada, col = "red", pch = 16)  # pch = 16 para círculos rellenos
# Ojiva "Menor Que"
plot(tabla_freq$Limite_Superior, tabla_freq$Frecuencia_Acumulada,
type = "l",
main = "Ojiva 'Menor Que' de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia Acumulada",
col = "blue")
# Ojiva "Mayor Que"
frecuencia_acumulada_mayor_que <- rev(cumsum(rev(tabla_freq$Frecuencia_Absoluta)))
plot(tabla_freq$Limite_Inferior, frecuencia_acumulada_mayor_que,
type = "l",
main = "Ojiva 'Mayor Que' de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia Acumulada",
col = "red")
barplot(tabla_freq$Frecuencia_Absoluta,
names.arg = tabla_freq$Marca_Clase,
main = "Gráfico de Barras de la Longitud del Pétalo",
xlab = "Marca de Clase (cm)",
ylab = "Frecuencia Absoluta",
col = "orange",
border = "black")
barplot(tabla_freq$Frecuencia_Absoluta,
names.arg = tabla_freq$Marca_Clase,
main = "Gráfico de Barras de la Longitud del Pétalo",
xlab = "Marca de Clase (cm)",
ylab = "Frecuencia Absoluta",
col = "orange",
border = "black")
# Crear el polígono de frecuencias
plot(tabla_freq$Marca_Clase, tabla_freq$Frecuencia_Absoluta,
type = "l",  # "l" para líneas
main = "Polígono de Frecuencias de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia",
col = "blue",
lwd = 2)  # Grosor de la línea
# Agregar puntos en las marcas de clase
points(tabla_freq$Marca_Clase, tabla_freq$Frecuencia_Absoluta, col = "red", pch = 16)
# pch = 16 para círculos rellenos
# Crear el polígono de frecuencias
plot(tabla_freq$Marca_Clase,
tabla_freq$Frecuencia_Absoluta,
type = "l",  # "l" para líneas
main = "Polígono de Frecuencias de la Longitud del Pétalo",
xlab = "Longitud del Pétalo (cm)",
ylab = "Frecuencia",
col = "blue",
lwd = 2)  # Grosor de la línea
# Agregar puntos en las marcas de clase
points(tabla_freq$Marca_Clase,
tabla_freq$Frecuencia_Absoluta,
col = "red", pch = 16)
# pch = 16 para círculos rellenos
tabla<-read_excel("tabla_frecuencias.xlsx")
# Instalación y carga de paquetes necesarios
## Para manipulación y visualización de datos
if (!require(tidyverse)) install.packages("tidyverse")
## Para exportar archivos en excel
if (!require(writexl)) install.packages("writexl")
## Para importar archivos en excel
if (!require(readxl)) install.packages("readxl")
# Instalación y carga de paquetes necesarios
## Para manipulación y visualización de datos
if (!require(tidyverse)) install.packages("tidyverse")
## Para exportar archivos en excel
if (!require(writexl)) install.packages("writexl")
## Para importar archivos en excel
if (!require(readxl)) install.packages("readxl")
tabla<-read_excel("tabla_frecuencias.xlsx")
View(tabla)
#Importar tabla de frecuencias
tabla<-read_excel("tabla_frecuencias.xlsx")
#Mostrar tabla de frecuencias
tabla
# Funcion personalizada para calcular los parametros
calcular_parametros_desde_tabla <- function(tabla) {
n <- sum(tabla$Frecuencia_Absoluta)
x_min <- min(tabla$Limite_Inferior)
x_max <- max(tabla$Limite_Superior)
rango <- x_max - x_min
k <- nrow(tabla)
amplitud <- (tabla$Limite_Superior[1] - tabla$Limite_Inferior[1])
return(list(
n = n,
x_min = x_min,
x_max = x_max,
rango = rango,
k = k,
amplitud = amplitud
))
}
# Estimar los parametros de agrupacion a partir de la tabla de frecuencias
parametros_tabla <- calcular_parametros_desde_tabla(tabla)
View(parametros_tabla)
# Calcular medidas
tendencia_tabla <- calcular_tendencia_central(tabla, parametros_tabla)
# Mostrar resultados
tendencia_tabla
# Calcular medidas de dispersión
dispersion_tabla <- calcular_dispersion(tabla, parametros_tabla, tendencia_tabla$media)
# Mostrar los resultados
dispersion
# Calcular medidas de dispersión
dispersion_tabla <- calcular_dispersion(tabla, parametros_tabla, tendencia_tabla$media)
# Mostrar los resultados
dispersion_tabla
# Calcular Q1 y P80
Q1_tabla <- calcular_posicion_relativa(tabla, parametros_tabla, 1, "cuartil");Q1_tabla
P80_tabla <- calcular_posicion_relativa(tabla, parametros_tabla, 80, "percentil");P80_tabla
# Instalación y carga de paquetes necesarios
## Para manipulación y visualización de datos
if (!require(tidyverse)) install.packages("tidyverse")
## Para exportar archivos en excel
if (!require(writexl)) install.packages("writexl")
## Para importar archivos en excel
if (!require(readxl)) install.packages("readxl")
dbinom(16, 20, 0.8)
pbinom(15, 20, 0.8)
dpois(5, 3)
ppois(2, 3)
ppois(2, 3)
