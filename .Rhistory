margen_error <- z_critico * error_estandar
# Límites del intervalo
limite_inf <- x_barra - margen_error
limite_sup <- x_barra + margen_error
# Resultados organizados
resultados <- list(
media_muestra = x_barra,
error_estandar = error_estandar,
z_critico = z_critico,
margen_error = margen_error,
limite_inferior = limite_inf,
limite_superior = limite_sup,
intervalo = c(limite_inf, limite_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA LA MEDIA ===\n")
cat("Desviación estándar poblacional conocida\n\n")
cat("Datos:\n")
cat("- Media muestral:", x_barra, "\n")
cat("- Desviación estándar poblacional:", sigma, "\n")
cat("- Tamaño de muestra:", n, "\n")
cat("- Nivel de confianza:", confianza*100, "%\n\n")
cat("Cálculos:\n")
cat("- Error estándar:", round(error_estandar, 4), "\n")
cat("- Valor z crítico:", round(z_critico, 4), "\n")
cat("- Margen de error:", round(margen_error, 4), "\n\n")
cat("RESULTADO:\n")
cat("IC al", confianza*100, "%: [", round(limite_inf, 4),
",", round(limite_sup, 4), "]\n")
return(invisible(resultados))
}
# Función personalizada para intervalo de confianza (sigma desconocida)
ic_media_t <- function(datos = NULL, x_barra = NULL, s = NULL, n = NULL, confianza = 0.95) {
# Si se proporcionan los datos directamente
if (!is.null(datos)) {
n <- length(datos)
x_barra <- mean(datos)
s <- sd(datos)
}
# Verificar que tenemos todos los parámetros necesarios
if (is.null(x_barra) || is.null(s) || is.null(n)) {
stop("Debe proporcionar los datos o los valores de x_barra, s y n")
}
# Cálculos
gl <- n - 1  # grados de libertad
alpha <- 1 - confianza
t_critico <- qt(1 - alpha/2, gl)
error_estandar <- s / sqrt(n)
margen_error <- t_critico * error_estandar
# Límites del intervalo
limite_inf <- x_barra - margen_error
limite_sup <- x_barra + margen_error
# Resultados organizados
resultados <- list(
datos = if(!is.null(datos)) datos else "No proporcionados",
n = n,
media_muestra = x_barra,
desv_estandar_muestra = s,
grados_libertad = gl,
error_estandar = error_estandar,
t_critico = t_critico,
margen_error = margen_error,
limite_inferior = limite_inf,
limite_superior = limite_sup,
intervalo = c(limite_inf, limite_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA LA MEDIA ===\n")
cat("Desviación estándar poblacional desconocida (Distribución t)\n\n")
if (!is.null(datos)) {
cat("Datos originales:\n")
cat(paste(datos, collapse = ", "), "\n\n")
}
cat("Estadísticos calculados:\n")
cat("- Tamaño de muestra (n):", n, "\n")
cat("- Media muestral (x̄):", round(x_barra, 4), "\n")
cat("- Desviación estándar muestral (s):", round(s, 4), "\n")
cat("- Grados de libertad:", gl, "\n")
cat("- Nivel de confianza:", confianza*100, "%\n\n")
cat("Cálculos del intervalo:\n")
cat("- Error estándar:", round(error_estandar, 4), "\n")
cat("- Valor t crítico:", round(t_critico, 4), "\n")
cat("- Margen de error:", round(margen_error, 4), "\n\n")
cat("RESULTADO:\n")
cat("IC al", confianza*100, "%: [", round(limite_inf, 4),
",", round(limite_sup, 4), "]\n\n")
return(invisible(resultados))
}
# Función personalizada para intervalo de confianza de varianza
ic_varianza <- function(datos = NULL, s = NULL, n = NULL, confianza = 0.90) {
# Si se proporcionan los datos directamente
if (!is.null(datos)) {
n <- length(datos)
s <- sd(datos)
}
# Verificar que tenemos todos los parámetros necesarios
if (is.null(s) || is.null(n)) {
stop("Debe proporcionar los datos o los valores de s y n")
}
# Cálculos básicos
s2 <- s^2  # varianza muestral
gl <- n - 1  # grados de libertad
alpha <- 1 - confianza
# Valores críticos de chi-cuadrado
chi2_inf <- qchisq(alpha/2, gl)        # límite inferior
chi2_sup <- qchisq(1 - alpha/2, gl)    # límite superior
# Intervalos de confianza para la varianza
ic_var_inf <- (gl * s2) / chi2_sup
ic_var_sup <- (gl * s2) / chi2_inf
# Intervalos de confianza para la desviación estándar
ic_sd_inf <- sqrt(ic_var_inf)
ic_sd_sup <- sqrt(ic_var_sup)
# Resultados organizados
resultados <- list(
datos = if(!is.null(datos)) datos else "No proporcionados",
n = n,
desv_estandar_muestra = s,
varianza_muestra = s2,
grados_libertad = gl,
chi2_inferior = chi2_inf,
chi2_superior = chi2_sup,
ic_varianza = c(ic_var_inf, ic_var_sup),
ic_desv_estandar = c(ic_sd_inf, ic_sd_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA LA VARIANZA ===\n")
cat("Distribución Chi-cuadrado\n\n")
if (!is.null(datos)) {
cat("Datos originales:\n")
if (length(datos) <= 20) {
cat(paste(datos, collapse = ", "), "\n\n")
} else {
cat("Muestra de", length(datos), "observaciones\n\n")
}
}
cat("Estadísticos calculados:\n")
cat("- Tamaño de muestra (n):", n, "\n")
cat("- Desviación estándar muestral (s):", round(s, 4), "\n")
cat("- Varianza muestral (s²):", round(s2, 4), "\n")
cat("- Grados de libertad:", gl, "\n")
cat("- Nivel de confianza:", confianza*100, "%\n")
cat("- Nivel de significancia (α):", alpha, "\n\n")
cat("Valores críticos de Chi-cuadrado:\n")
cat("- χ²", alpha/2, ",", gl, "=", round(chi2_inf, 4), "\n")
cat("- χ²", 1-alpha/2, ",", gl, "=", round(chi2_sup, 4), "\n\n")
cat("Cálculos del intervalo:\n")
cat("- Límite inferior varianza: (", gl, "×", round(s2,1), ") /",
round(chi2_sup,3), "=", round(ic_var_inf, 1), "\n")
cat("- Límite superior varianza: (", gl, "×", round(s2,1), ") /",
round(chi2_inf,3), "=", round(ic_var_sup, 1), "\n\n")
cat("RESULTADOS:\n")
cat("IC al", confianza*100, "% para σ²: [", round(ic_var_inf, 1),
",", round(ic_var_sup, 1), "] ")
cat("IC al", confianza*100, "% para σ:  [", round(ic_sd_inf, 2),
",", round(ic_sd_sup, 2), "] ")
return(invisible(resultados))
}
# Función personalizada para intervalo de confianza de una proporción
ic_proporcion <- function(x, n, confianza = 0.95) {
p_hat <- x / n
alpha <- 1 - confianza
z_critico <- qnorm(1 - alpha/2)
error_estandar <- sqrt(p_hat * (1 - p_hat) / n)
margen_error <- z_critico * error_estandar
limite_inf <- p_hat - margen_error
limite_sup <- p_hat + margen_error
# Resultados organizados
resultados <- list(
proporcion_muestral = p_hat,
error_estandar = error_estandar,
z_critico = z_critico,
margen_error = margen_error,
limite_inferior = limite_inf,
limite_superior = limite_sup,
intervalo = c(limite_inf, limite_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA UNA PROPORCIÓN ===\n")
cat("Datos:\n")
cat("- Éxitos (x):", x, "\n")
cat("- Tamaño de muestra (n):", n, "\n")
cat("- Proporción muestral (p̂):", round(p_hat, 4), "\n")
cat("- Nivel de confianza:", confianza*100, "%\n\n")
cat("Cálculos:\n")
cat("- Error estándar:", round(error_estandar, 4), "\n")
cat("- Valor z crítico:", round(z_critico, 4), "\n")
cat("- Margen de error:", round(margen_error, 4), "\n\n")
cat("RESULTADO:\n")
cat("IC al", confianza*100, "%: [", round(limite_inf, 4),
",", round(limite_sup, 4), "]\n")
return(invisible(resultados))
}
# Uso de la función con los datos del ejemplo
resultado <- ic_media_sigma(x_barra = 0.85,
sigma = 0.15,
n = 25,
confianza = 0.95)
# Datos del problema
alturas <- c(12.5, 14.2, 13.8, 15.1, 12.9, 14.7, 13.3, 14.9,
13.6, 14.4, 12.8, 15.3, 13.9, 14.1, 13.7)
# Cálculo directo con función incorporada
resultado <- t.test(alturas, conf.level = 0.95)
print(resultado)
# Opción 1: Pasando los datos directamente
resultado1 <- ic_media_t(datos = alturas, confianza = 0.95)
# Opción 2: Pasando los estadísticos calculados
resultado2 <- ic_media_t(x_barra = 13.89, s = 0.85, n = 15, confianza = 0.95)
# Ejemplo con los datos del problema
resultado <- ic_varianza(s = 45, n = 20, confianza = 0.90)
# Datos del problema
n <- 200
x <- 156
confianza <- 0.95
# Cálculo directo con función incorporada
prop.test(x, n, conf.level = confianza, correct = FALSE)
# Uso con los datos del ejemplo
ic_proporcion(x = 156,
n = 200,
confianza = 0.95)
# Opción 1: Pasando los datos directamente
resultado1 <- ic_media_s(datos = alturas, confianza = 0.95)
# Opción 2: Pasando los estadísticos calculados
resultado2 <- ic_media_s(x_barra = 13.89, s = 0.85, n = 15, confianza = 0.95)
# Función personalizada para intervalo de confianza (sigma conocida)
ic_media_sigma <- function(x_barra, sigma, n, confianza = 0.95) {
# Cálculos
error_estandar <- sigma / sqrt(n)
alpha <- 1 - confianza
z_critico <- qnorm(1 - alpha/2)
margen_error <- z_critico * error_estandar
# Límites del intervalo
limite_inf <- x_barra - margen_error
limite_sup <- x_barra + margen_error
# Resultados organizados
resultados <- list(
media_muestra = x_barra,
error_estandar = error_estandar,
z_critico = z_critico,
margen_error = margen_error,
limite_inferior = limite_inf,
limite_superior = limite_sup,
intervalo = c(limite_inf, limite_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA LA MEDIA ===\n")
cat("Desviación estándar poblacional conocida\n\n")
cat("Datos:\n")
cat("- Media muestral:", x_barra, "\n")
cat("- Desviación estándar poblacional:", sigma, "\n")
cat("- Tamaño de muestra:", n, "\n")
cat("- Nivel de confianza:", confianza*100, "%\n\n")
cat("Cálculos:\n")
cat("- Error estándar:", round(error_estandar, 4), "\n")
cat("- Valor z crítico:", round(z_critico, 4), "\n")
cat("- Margen de error:", round(margen_error, 4), "\n\n")
cat("RESULTADO:\n")
cat("IC al", confianza*100, "%: [", round(limite_inf, 4),
",", round(limite_sup, 4), "]\n")
return(invisible(resultados))
}
# Función robusta que decide automáticamente entre Z y t
ic_media_s <- function(datos = NULL, x_barra = NULL, s = NULL, n = NULL, confianza = 0.95) {
# Si se proporcionan los datos directamente
if (!is.null(datos)) {
n <- length(datos)
x_barra <- mean(datos)
s <- sd(datos)
}
# Verificar que tenemos todos los parámetros necesarios
if (is.null(x_barra) || is.null(s) || is.null(n)) {
stop("Debe proporcionar los datos o los valores de x_barra, s y n")
}
# Decidir qué distribución usar
usar_z <- n >= 30
# Cálculos comunes
alpha <- 1 - confianza
error_estandar <- s / sqrt(n)
if (usar_z) {
# Usar distribución Z
valor_critico <- qnorm(1 - alpha/2)
distribucion <- "Z (Normal estándar)"
gl <- NA
} else {
# Usar distribución t
gl <- n - 1
valor_critico <- qt(1 - alpha/2, gl)
distribucion <- "t de Student"
}
margen_error <- valor_critico * error_estandar
# Límites del intervalo
limite_inf <- x_barra - margen_error
limite_sup <- x_barra + margen_error
# Resultados organizados
resultados <- list(
datos = if(!is.null(datos)) datos else "No proporcionados",
n = n,
media_muestra = x_barra,
desv_estandar_muestra = s,
distribucion_usada = distribucion,
grados_libertad = if(usar_z) NA else gl,
error_estandar = error_estandar,
valor_critico = valor_critico,
margen_error = margen_error,
limite_inferior = limite_inf,
limite_superior = limite_sup,
intervalo = c(limite_inf, limite_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA LA MEDIA ===\n")
cat("Desviación estándar poblacional desconocida\n")
cat("Distribución utilizada:", distribucion, "\n")
cat("Criterio: n", if(usar_z) "≥" else "<", "30\n\n")
if (!is.null(datos)) {
cat("Datos originales:\n")
if (length(datos) <= 20) {
cat(paste(datos, collapse = ", "), "\n\n")
} else {
cat("Muestra de", length(datos), "observaciones\n\n")
}
}
cat("Estadísticos calculados:\n")
cat("- Tamaño de muestra (n):", n, "\n")
cat("- Media muestral (x̄):", round(x_barra, 4), "\n")
cat("- Desviación estándar muestral (s):", round(s, 4), "\n")
if (!usar_z) cat("- Grados de libertad:", gl, "\n")
cat("- Nivel de confianza:", confianza*100, "%\n\n")
cat("Cálculos del intervalo:\n")
cat("- Error estándar:", round(error_estandar, 4), "\n")
cat("- Valor", if(usar_z) "z" else "t", "crítico:", round(valor_critico, 4), "\n")
cat("- Margen de error:", round(margen_error, 4), "\n\n")
cat("RESULTADO:\n")
cat("IC al", confianza*100, "%: [", round(limite_inf, 4),
",", round(limite_sup, 4), "]\n\n")
cat("Interpretación:\n")
cat("Con un", confianza*100, "% de confianza, la media poblacional\n")
cat("está entre", round(limite_inf, 4), "y", round(limite_sup, 4), ".\n")
return(invisible(resultados))
}
# Función personalizada para intervalo de confianza de varianza
ic_varianza <- function(datos = NULL, s = NULL, n = NULL, confianza = 0.90) {
# Si se proporcionan los datos directamente
if (!is.null(datos)) {
n <- length(datos)
s <- sd(datos)
}
# Verificar que tenemos todos los parámetros necesarios
if (is.null(s) || is.null(n)) {
stop("Debe proporcionar los datos o los valores de s y n")
}
# Cálculos básicos
s2 <- s^2  # varianza muestral
gl <- n - 1  # grados de libertad
alpha <- 1 - confianza
# Valores críticos de chi-cuadrado
chi2_inf <- qchisq(alpha/2, gl)        # límite inferior
chi2_sup <- qchisq(1 - alpha/2, gl)    # límite superior
# Intervalos de confianza para la varianza
ic_var_inf <- (gl * s2) / chi2_sup
ic_var_sup <- (gl * s2) / chi2_inf
# Intervalos de confianza para la desviación estándar
ic_sd_inf <- sqrt(ic_var_inf)
ic_sd_sup <- sqrt(ic_var_sup)
# Resultados organizados
resultados <- list(
datos = if(!is.null(datos)) datos else "No proporcionados",
n = n,
desv_estandar_muestra = s,
varianza_muestra = s2,
grados_libertad = gl,
chi2_inferior = chi2_inf,
chi2_superior = chi2_sup,
ic_varianza = c(ic_var_inf, ic_var_sup),
ic_desv_estandar = c(ic_sd_inf, ic_sd_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA LA VARIANZA ===\n")
cat("Distribución Chi-cuadrado\n\n")
if (!is.null(datos)) {
cat("Datos originales:\n")
if (length(datos) <= 20) {
cat(paste(datos, collapse = ", "), "\n\n")
} else {
cat("Muestra de", length(datos), "observaciones\n\n")
}
}
cat("Estadísticos calculados:\n")
cat("- Tamaño de muestra (n):", n, "\n")
cat("- Desviación estándar muestral (s):", round(s, 4), "\n")
cat("- Varianza muestral (s²):", round(s2, 4), "\n")
cat("- Grados de libertad:", gl, "\n")
cat("- Nivel de confianza:", confianza*100, "%\n")
cat("- Nivel de significancia (α):", alpha, "\n\n")
cat("Valores críticos de Chi-cuadrado:\n")
cat("- χ²", alpha/2, ",", gl, "=", round(chi2_inf, 4), "\n")
cat("- χ²", 1-alpha/2, ",", gl, "=", round(chi2_sup, 4), "\n\n")
cat("Cálculos del intervalo:\n")
cat("- Límite inferior varianza: (", gl, "×", round(s2,1), ") /",
round(chi2_sup,3), "=", round(ic_var_inf, 1), "\n")
cat("- Límite superior varianza: (", gl, "×", round(s2,1), ") /",
round(chi2_inf,3), "=", round(ic_var_sup, 1), "\n\n")
cat("RESULTADOS:\n")
cat("IC al", confianza*100, "% para σ²: [", round(ic_var_inf, 1),
",", round(ic_var_sup, 1), "] ")
cat("IC al", confianza*100, "% para σ:  [", round(ic_sd_inf, 2),
",", round(ic_sd_sup, 2), "] ")
return(invisible(resultados))
}
# Función personalizada para intervalo de confianza de una proporción
ic_proporcion <- function(x, n, confianza = 0.95) {
p_hat <- x / n
alpha <- 1 - confianza
z_critico <- qnorm(1 - alpha/2)
error_estandar <- sqrt(p_hat * (1 - p_hat) / n)
margen_error <- z_critico * error_estandar
limite_inf <- p_hat - margen_error
limite_sup <- p_hat + margen_error
# Resultados organizados
resultados <- list(
proporcion_muestral = p_hat,
error_estandar = error_estandar,
z_critico = z_critico,
margen_error = margen_error,
limite_inferior = limite_inf,
limite_superior = limite_sup,
intervalo = c(limite_inf, limite_sup),
confianza = confianza * 100
)
# Mostrar resultados
cat("=== INTERVALO DE CONFIANZA PARA UNA PROPORCIÓN ===\n")
cat("Datos:\n")
cat("- Éxitos (x):", x, "\n")
cat("- Tamaño de muestra (n):", n, "\n")
cat("- Proporción muestral (p̂):", round(p_hat, 4), "\n")
cat("- Nivel de confianza:", confianza*100, "%\n\n")
cat("Cálculos:\n")
cat("- Error estándar:", round(error_estandar, 4), "\n")
cat("- Valor z crítico:", round(z_critico, 4), "\n")
cat("- Margen de error:", round(margen_error, 4), "\n\n")
cat("RESULTADO:\n")
cat("IC al", confianza*100, "%: [", round(limite_inf, 4),
",", round(limite_sup, 4), "]\n")
return(invisible(resultados))
}
# Uso de la función con los datos del ejemplo
resultado <- ic_media_sigma(x_barra = 0.85,
sigma = 0.15,
n = 25,
confianza = 0.95)
# Datos del problema
alturas <- c(12.5, 14.2, 13.8, 15.1, 12.9, 14.7, 13.3, 14.9,
13.6, 14.4, 12.8, 15.3, 13.9, 14.1, 13.7)
# Cálculo directo con función incorporada
resultado <- t.test(alturas, conf.level = 0.95)
print(resultado)
# Opción 1: Pasando los datos directamente
resultado1 <- ic_media_s(datos = alturas, confianza = 0.95)
# Opción 2: Pasando los estadísticos calculados
resultado2 <- ic_media_s(x_barra = 13.89, s = 0.85, n = 15, confianza = 0.95)
# Instalar paquete si no está instalado
# install.packages("BSDA")
library(BSDA)
# Instalar paquete si no está instalado
# install.packages("BSDA")
library(BSDA)
# Instalar paquete si no está instalado
install.packages("BSDA")
library(BSDA)
# Datos del ejercicio
n <- 20
media_muestra <- 242
desv_std <- 15
mu_0 <- 250
# Prueba t con estadísticos resumidos usando tsum.test()
tsum.test(mean.x = media_muestra,
s.x = desv_std,
n.x = n,
mu = mu_0,
alternative = "two.sided",
conf.level = 0.95)
# Instalar paquete si no está instalado
install.packages("BSDA")
library(BSDA)
# Prueba t con estadísticos resumidos usando tsum.test()
tsum.test(mean.x = 242,
s.x = 15,
n.x = 20,
mu = 250,
alternative = "two.sided",
conf.level = 0.95)
install.packages("BSDA")
# Instalar paquete si no está instalado
## Para manipulación y visualización de datos
if (!require(BSDA)) install.packages("BSDA")
# Prueba t con estadísticos resumidos usando tsum.test()
tsum.test(mean.x = 242,
s.x = 15,
n.x = 20,
mu = 250,
alternative = "two.sided",
conf.level = 0.95)
trat1 <- c(10,12,11,13,12,11,14,13)
trat2 <- c(9,10,11,10,12,10,11,10)
var.test(trat1, trat2,
alternative = "two.sided",
conf.level = 0.95)
