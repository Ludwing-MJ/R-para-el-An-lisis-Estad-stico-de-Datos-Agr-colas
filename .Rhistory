}
cat("\n")
cat("Valor-p =", round(x$p.value, 6), "\n")
cat("Nivel de significancia =", x$alpha, "\n")
cat("\n")
cat("Decisión:", x$decision, "\n")
cat("\n")
}
# Función personalizada para prueba de hipótesis de una varianza
var_test_chi <- function(x = NULL, n = NULL, s2 = NULL, sigma0_2,
alternative = "two.sided", alpha = 0.05) {
# Validación de argumentos
if (is.null(x) && (is.null(n) || is.null(s2))) {
stop("Debe proporcionar 'x' (vector de datos) o 'n' y 's2' (estadísticos muestrales)")
}
if (!is.null(x) && (!is.null(n) || !is.null(s2))) {
warning("Se proporcionaron datos y estadísticos. Se usarán los datos 'x'")
}
# Calcular estadísticos si se proporcionan los datos
if (!is.null(x)) {
n <- length(x)
s2 <- var(x)
}
# Validar alternative
alternative <- match.arg(alternative, c("two.sided", "less", "greater"))
# Calcular estadístico chi-cuadrado
chi_sq <- (n - 1) * s2 / sigma0_2
df <- n - 1
# Calcular valor-p según el tipo de prueba
if (alternative == "two.sided") {
# Para prueba bilateral, usar el mínimo de las dos colas multiplicado por 2
p_value <- 2 * min(pchisq(chi_sq, df), pchisq(chi_sq, df, lower.tail = FALSE))
} else if (alternative == "greater") {
p_value <- pchisq(chi_sq, df, lower.tail = FALSE)
} else { # alternative == "less"
p_value <- pchisq(chi_sq, df, lower.tail = TRUE)
}
# Decisión
decision <- ifelse(p_value < alpha, "Rechazar H0", "No rechazar H0")
# Valor crítico
if (alternative == "two.sided") {
crit_lower <- qchisq(alpha/2, df)
crit_upper <- qchisq(1 - alpha/2, df)
critical_value <- c(crit_lower, crit_upper)
} else if (alternative == "greater") {
critical_value <- qchisq(1 - alpha, df)
} else { # alternative == "less"
critical_value <- qchisq(alpha, df)
}
# Crear objeto de resultado
result <- list(
statistic = chi_sq,
parameter = df,
p.value = p_value,
critical.value = critical_value,
alternative = alternative,
method = "Prueba de hipótesis para una varianza (Chi-cuadrado)",
data.name = deparse(substitute(x)),
sample.size = n,
sample.variance = s2,
null.variance = sigma0_2,
alpha = alpha,
decision = decision
)
class(result) <- "var_test_custom"
return(result)
}
# Método print personalizado para mostrar resultados de forma clara
print.var_test_custom <- function(x, ...) {
cat("\n")
cat(x$method, "\n")
cat("Datos:", x$data.name, "\n")
cat("\n")
cat("Hipótesis:\n")
if (x$alternative == "two.sided") {
cat("H0: sigma^2 =", x$null.variance, "\n")
cat("Ha: sigma^2 ≠", x$null.variance, "\n")
} else if (x$alternative == "greater") {
cat("H0: sigma^2 ≤", x$null.variance, "\n")
cat("Ha: sigma^2 >", x$null.variance, "\n")
} else {
cat("H0: sigma^2 ≥", x$null.variance, "\n")
cat("Ha: sigma^2 <", x$null.variance, "\n")
}
cat("\n")
cat("Estadísticos de la muestra:\n")
cat("n =", x$sample.size, "\n")
cat("s^2 =", round(x$sample.variance, 4), "\n")
cat("\n")
cat("Estadístico de prueba:\n")
cat("Chi-cuadrado =", round(x$statistic, 4), "\n")
cat("Grados de libertad =", x$parameter, "\n")
cat("\n")
cat("Valor crítico(s):\n")
if (length(x$critical.value) == 2) {
cat("Chi^2(", x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[1], 4), "\n")
cat("Chi^2(", 1-x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[2], 4), "\n")
} else {
cat("Chi^2 crítico =", round(x$critical.value, 4), "\n")
}
cat("\n")
cat("Valor-p =", round(x$p.value, 6), "\n")
cat("Nivel de significancia =", x$alpha, "\n")
cat("\n")
cat("Decisión:", x$decision, "\n")
cat("\n")
}
# Función personalizada para prueba de hipótesis de una varianza
var_test_chi <- function(x = NULL, n = NULL, s2 = NULL, sigma0_2,
alternative = "two.sided", alpha = 0.05) {
# Validación de argumentos
if (is.null(x) && (is.null(n) || is.null(s2))) {
stop("Debe proporcionar 'x' (vector de datos) o 'n' y 's2' (estadísticos muestrales)")
}
if (!is.null(x) && (!is.null(n) || !is.null(s2))) {
warning("Se proporcionaron datos y estadísticos. Se usarán los datos 'x'")
}
# Calcular estadísticos si se proporcionan los datos
if (!is.null(x)) {
n <- length(x)
s2 <- var(x)
}
# Validar alternative
alternative <- match.arg(alternative, c("two.sided", "less", "greater"))
# Calcular estadístico chi-cuadrado
chi_sq <- (n - 1) * s2 / sigma0_2
df <- n - 1
# Calcular valor-p según el tipo de prueba
if (alternative == "two.sided") {
# Para prueba bilateral, usar el mínimo de las dos colas multiplicado por 2
p_value <- 2 * min(pchisq(chi_sq, df), pchisq(chi_sq, df, lower.tail = FALSE))
} else if (alternative == "greater") {
p_value <- pchisq(chi_sq, df, lower.tail = FALSE)
} else { # alternative == "less"
p_value <- pchisq(chi_sq, df, lower.tail = TRUE)
}
# Decisión
decision <- ifelse(p_value < alpha, "Rechazar H0", "No rechazar H0")
# Valor crítico
if (alternative == "two.sided") {
crit_lower <- qchisq(alpha/2, df)
crit_upper <- qchisq(1 - alpha/2, df)
critical_value <- c(crit_lower, crit_upper)
} else if (alternative == "greater") {
critical_value <- qchisq(1 - alpha, df)
} else { # alternative == "less"
critical_value <- qchisq(alpha, df)
}
# Crear objeto de resultado
result <- list(
statistic = chi_sq,
parameter = df,
p.value = p_value,
critical.value = critical_value,
alternative = alternative,
method = "Prueba de hipótesis para una varianza (Chi-cuadrado)",
data.name = deparse(substitute(x)),
sample.size = n,
sample.variance = s2,
null.variance = sigma0_2,
alpha = alpha,
decision = decision
)
class(result) <- "var_test_custom"
return(result)
}
# Método print personalizado para mostrar resultados de forma clara
print.var_test_custom <- function(x, ...) {
cat("\n")
cat(x$method, "\n")
cat("Datos:", x$data.name, "\n")
cat("\n")
cat("Hipótesis:\n")
if (x$alternative == "two.sided") {
cat("H0: sigma^2 =", x$null.variance, "\n")
cat("Ha: sigma^2 ≠", x$null.variance, "\n")
} else if (x$alternative == "greater") {
cat("H0: sigma^2 ≤", x$null.variance, "\n")
cat("Ha: sigma^2 >", x$null.variance, "\n")
} else {
cat("H0: sigma^2 ≥", x$null.variance, "\n")
cat("Ha: sigma^2 <", x$null.variance, "\n")
}
cat("\n")
cat("Estadísticos de la muestra:\n")
cat("n =", x$sample.size, "\n")
cat("s^2 =", round(x$sample.variance, 4), "\n")
cat("\n")
cat("Estadístico de prueba:\n")
cat("Chi-cuadrado =", round(x$statistic, 4), "\n")
cat("Grados de libertad =", x$parameter, "\n")
cat("\n")
cat("Valor crítico(s):\n")
if (length(x$critical.value) == 2) {
cat("Chi^2(", x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[1], 4), "\n")
cat("Chi^2(", 1-x$alpha/2, ",", x$parameter, ") =", round(x$critical.value[2], 4), "\n")
} else {
cat("Chi^2 crítico =", round(x$critical.value, 4), "\n")
}
cat("\n")
cat("Valor-p =", round(x$p.value, 6), "\n")
cat("Nivel de significancia =", x$alpha, "\n")
cat("\n")
cat("Decisión:", x$decision, "\n")
cat("\n")
}
# Aplicacion de la funcion personalizada
var_test_custom(n = 10, s2 = 5.8,
sigma0_2 = 4,
alternative = "greater",
alpha = 0.05)
# Importación de los valores
x <- c(78, 65, 86, 68, 83, 68, 75, 80, 82, 66)
y <- c(60, 52, 68, 53, 65, 57, 58, 62, 65, 53)
# Test de correlación
cor.test(x, y, alternative = "two.sided", method = "pearson", conf.level = 0.95)
# Importación de los valores
x <- c(78, 65, 86, 68, 83, 68, 75, 80, 82, 66)
y <- c(60, 52, 68, 53, 65, 57, 58, 62, 65, 53)
cov(x,y)
# Test de correlación
cor.test(x, y, alternative = "two.sided",
method = "pearson", conf.level = 0.95)
# Calculo del coeficiente de correalción
cor(x,y)
sum((x-mean(x))^2)
sum((y-mean(y))^2)
sum((x-mean(x))^2)
sum((y-mean(y))^2)
# Importación de los valores
x <- c(78, 65, 86, 68, 83, 68, 75, 80, 82, 66)
y <- c(60, 52, 68, 53, 65, 57, 58, 62, 65, 53)
sum((x-mean(x))^2)
sum((y-mean(y))^2)
# Calculo de la covarianza
cov(x,y)
# Calculo del coeficiente de correalción
cor(x,y)
# Test de correlación
cor.test(x, y, alternative = "two.sided",
method = "pearson", conf.level = 0.95)
datos <- data.frame(
Peso_Padres = c(78, 65, 86, 68, 83, 68, 75, 80, 82, 66),
Peso_Hijos = c(60, 52, 68, 53, 65, 57, 58, 62, 65, 53)
)
# Importación de los valores
# Datos del ejemplo: peso de padres (X) y peso de hijos (Y) en kilogramos
datos <- data.frame(
Peso_Padres = c(78, 65, 86, 68, 83, 68, 75, 80, 82, 66),
Peso_Hijos = c(60, 52, 68, 53, 65, 57, 58, 62, 65, 53)
)
# Calculo de la suma de cuadrados (Sxx)
sum((datos$Peso_Padres-mean(datos$Peso_Padres))^2)
# Calculo de la suma de cuadrados (Syy)
sum((datos$Peso_Hijos-mean(datos$Peso_Hijos))^2)
# Calculo de la covarianza
cov(datos$Peso_Padres,datos$Peso_Hijos)
# Calculo del coeficiente de correalción
cor(datos$Peso_Padres,datos$Peso_Hijos)
# Test de correlación
cor.test(datos$Peso_Padres, datos$Peso_Hijos,
alternative = "two.sided",
method = "pearson", conf.level = 0.95)
# Extraer los datos del dataframe a vectores
x <- datos$Peso_Padres
# Extraer los datos del dataframe a vectores
x <- datos$Peso_Padres
y <- datos$Peso_Hijos
# Configurar el layout para múltiples gráficos
par(mfrow = c(2, 2), mar = c(4, 4, 3, 2))
# 1. Gráfico de dispersión básico con línea de regresión
plot(x, y,
main = "Correlación Lineal Simple\nPeso Padres vs Peso Hijos",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkblue",
cex = 1.2)
# Agregar línea de regresión
abline(lm(y ~ x), col = "red", lwd = 2)
# Agregar líneas de las medias
abline(v = media_x, col = "gray", lty = 2, lwd = 1)
abline(h = media_y, col = "gray", lty = 2, lwd = 1)
# Agregar texto con estadísticas
text(67, 67, paste("r =", round(correlacion, 3)),
col = "red", font = 2, cex = 1.1)
# 2. Gráfico con intervalos de confianza
plot(x, y,
main = "Dispersión con Banda de Confianza",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkgreen",
cex = 1.2)
# Crear secuencia para línea suave
x_seq <- seq(min(x), max(x), length.out = 100)
modelo <- lm(y ~ x)
predicciones <- predict(modelo, newdata = data.frame(x = x_seq),
interval = "confidence")
# Agregar banda de confianza
polygon(c(x_seq, rev(x_seq)),
c(predicciones[,"lwr"], rev(predicciones[,"upr"])),
col = rgb(0, 0, 1, 0.2), border = NA)
# Línea de regresión
lines(x_seq, predicciones[,"fit"], col = "blue", lwd = 2)
# 3. Histogramas de las variables
hist(x,
main = "Distribución Peso Padres",
xlab = "Peso (kg)",
ylab = "Frecuencia",
col = "lightblue",
border = "darkblue")
abline(v = media_x, col = "red", lwd = 2, lty = 2)
# 4. Boxplots comparativos
boxplot(list(Padres = x, Hijos = y),
main = "Comparación de Distribuciones",
ylab = "Peso (kg)",
col = c("lightcoral", "lightsteelblue"),
border = c("darkred", "darkblue"))
# Resetear parámetros gráficos
par(mfrow = c(1, 1))
# Extraer los datos del dataframe a vectores
x <- datos$Peso_Padres
y <- datos$Peso_Hijos
# 1. Gráfico de dispersión básico con línea de regresión
plot(x, y,
main = "Correlación Lineal Simple\nPeso Padres vs Peso Hijos",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkblue",
cex = 1.2)
# Agregar línea de regresión
abline(lm(y ~ x), col = "red", lwd = 2)
# Agregar líneas de las medias
abline(v = mean(x), col = "gray", lty = 2, lwd = 1)
abline(h = mean(y), col = "gray", lty = 2, lwd = 1)
# Agregar texto con estadísticas
text(67, 67, paste("r =", round(correlacion, 3)),
col = "red", font = 2, cex = 1.1)
# 2. Gráfico con intervalos de confianza
plot(x, y,
main = "Dispersión con Banda de Confianza",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkgreen",
cex = 1.2)
# Crear secuencia para línea suave
x_seq <- seq(min(x), max(x), length.out = 100)
modelo <- lm(y ~ x)
predicciones <- predict(modelo, newdata = data.frame(x = x_seq),
interval = "confidence")
# Agregar banda de confianza
polygon(c(x_seq, rev(x_seq)),
c(predicciones[,"lwr"], rev(predicciones[,"upr"])),
col = rgb(0, 0, 1, 0.2), border = NA)
# Línea de regresión
lines(x_seq, predicciones[,"fit"], col = "blue", lwd = 2)
# 3. Histogramas de las variables
hist(x,
main = "Distribución Peso Padres",
xlab = "Peso (kg)",
ylab = "Frecuencia",
col = "lightblue",
border = "darkblue")
abline(v = media_x, col = "red", lwd = 2, lty = 2)
# 4. Boxplots comparativos
boxplot(list(Padres = x, Hijos = y),
main = "Comparación de Distribuciones",
ylab = "Peso (kg)",
col = c("lightcoral", "lightsteelblue"),
border = c("darkred", "darkblue"))
# Extraer los datos del dataframe a vectores
x <- datos$Peso_Padres
y <- datos$Peso_Hijos
# 1. Gráfico de dispersión básico con línea de regresión
plot(x, y,
main = "Correlación Lineal Simple\nPeso Padres vs Peso Hijos",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkblue",
cex = 1.2)
# Agregar línea de regresión
abline(lm(y ~ x), col = "red", lwd = 2)
# Agregar líneas de las medias
abline(v = mean(x), col = "gray", lty = 2, lwd = 1)
abline(h = mean(y), col = "gray", lty = 2, lwd = 1)
# Agregar texto con estadísticas
text(67, 67, paste("r =", round(cor(x,y), 3)),
col = "red", font = 2, cex = 1.1)
# 2. Gráfico con intervalos de confianza
plot(x, y,
main = "Dispersión con Banda de Confianza",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkgreen",
cex = 1.2)
# Crear secuencia para línea suave
x_seq <- seq(min(x), max(x), length.out = 100)
modelo <- lm(y ~ x)
predicciones <- predict(modelo, newdata = data.frame(x = x_seq),
interval = "confidence")
# Agregar banda de confianza
polygon(c(x_seq, rev(x_seq)),
c(predicciones[,"lwr"], rev(predicciones[,"upr"])),
col = rgb(0, 0, 1, 0.2), border = NA)
# Línea de regresión
lines(x_seq, predicciones[,"fit"], col = "blue", lwd = 2)
# 3. Histogramas de las variables
hist(x,
main = "Distribución Peso Padres",
xlab = "Peso (kg)",
ylab = "Frecuencia",
col = "lightblue",
border = "darkblue")
abline(v = media_x, col = "red", lwd = 2, lty = 2)
# 4. Boxplots comparativos
boxplot(list(Padres = x, Hijos = y),
main = "Comparación de Distribuciones",
ylab = "Peso (kg)",
col = c("lightcoral", "lightsteelblue"),
border = c("darkred", "darkblue"))
# Extraer los datos del dataframe a vectores
x <- datos$Peso_Padres
y <- datos$Peso_Hijos
# 1. Gráfico de dispersión básico con línea de regresión
plot(x, y,
main = "Correlación Lineal Simple\nPeso Padres vs Peso Hijos",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkblue",
cex = 1.2)
# Agregar línea de regresión
abline(lm(y ~ x), col = "red", lwd = 2)
# Agregar líneas de las medias
abline(v = mean(x), col = "gray", lty = 2, lwd = 1)
abline(h = mean(y), col = "gray", lty = 2, lwd = 1)
# Agregar texto con estadísticas
text(67, 67, paste("r =", round(cor(x,y), 3)),
col = "red", font = 2, cex = 1.1)
# 2. Gráfico con intervalos de confianza
plot(x, y,
main = "Dispersión con Banda de Confianza",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkgreen",
cex = 1.2)
# Crear secuencia para línea suave
x_seq <- seq(min(x), max(x), length.out = 100)
modelo <- lm(y ~ x)
predicciones <- predict(modelo, newdata = data.frame(x = x_seq),
interval = "confidence")
# Agregar banda de confianza
polygon(c(x_seq, rev(x_seq)),
c(predicciones[,"lwr"], rev(predicciones[,"upr"])),
col = rgb(0, 0, 1, 0.2), border = NA)
# Línea de regresión
lines(x_seq, predicciones[,"fit"], col = "blue", lwd = 2)
# 3. Histogramas de las variables
hist(x,
main = "Distribución Peso Padres",
xlab = "Peso (kg)",
ylab = "Frecuencia",
col = "lightblue",
border = "darkblue")
abline(v = mean(x), col = "red", lwd = 2, lty = 2)
# 4. Boxplots comparativos
boxplot(list(Padres = x, Hijos = y),
main = "Comparación de Distribuciones",
ylab = "Peso (kg)",
col = c("lightcoral", "lightsteelblue"),
border = c("darkred", "darkblue"))
# 1. Gráfico de dispersión básico con línea de regresión
plot(x, y,
main = "Correlación Lineal Simple\nPeso Padres vs Peso Hijos",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkblue",
cex = 1.2)
# Agregar línea de regresión
abline(lm(y ~ x), col = "red", lwd = 2)
# Agregar líneas de las medias
abline(v = mean(x), col = "gray", lty = 2, lwd = 1)
abline(h = mean(y), col = "gray", lty = 2, lwd = 1)
# Agregar texto con estadísticas
text(67, 67, paste("r =", round(cor(x,y), 3)),
col = "red", font = 2, cex = 1.1)
# 2. Gráfico con intervalos de confianza
plot(x, y,
main = "Dispersión con Banda de Confianza",
xlab = "Peso de Padres (kg)",
ylab = "Peso de Hijos (kg)",
pch = 19,
col = "darkgreen",
cex = 1.2)
# Crear secuencia para línea suave
x_seq <- seq(min(x), max(x), length.out = 100)
modelo <- lm(y ~ x)
predicciones <- predict(modelo, newdata = data.frame(x = x_seq),
interval = "confidence")
# Agregar banda de confianza
polygon(c(x_seq, rev(x_seq)),
c(predicciones[,"lwr"], rev(predicciones[,"upr"])),
col = rgb(0, 0, 1, 0.2), border = NA)
# Línea de regresión
lines(x_seq, predicciones[,"fit"], col = "blue", lwd = 2)
